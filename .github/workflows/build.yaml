---
name: Yerbas Build
on:
  push:
    branches:
      - main
      - v3.1.2*
      - dev
  pull_request:
    branches:
      - dev
env:
  COIN_NAME: yerbas
  BUILD_DIR: yerbas-build
  COMPRESS_DIR: yerbas-compress
  TEST_LOG_ARTIFACT_DIR: test-logs
jobs:
  checking-build-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - name: Triggered By
        run: |
          echo "checking out $GITHUB_REF triggered by $GITHUB_EVENT_NAME"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Read versions
        id: versions
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: 'release-version snapshot-version'

      - name: Choose version
        id: selected-version
        shell: bash
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] || [[ "$GITHUB_REF" == *dev ]] || [[ "$GITHUB_REF" == *v3.1.2* ]]; then
              version=${{ steps.versions.outputs.snapshot-version }}
          elif [[ "$GITHUB_EVENT_NAME" != "pull_request" ]] && [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
              version=${{ steps.versions.outputs.release-version }}
          fi
          echo "version is: [$version]"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$version" > version.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: version
          path: version.txt

    outputs:
      version: ${{ steps.selected-version.outputs.version }}

  build-macos:
    name: macos build
    needs: checking-build-version
    runs-on: macos-11
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Getting Version
        uses: actions/download-artifact@v3
      - name: Install Required Packages
        run: |
          brew install automake libtool pkg-config miniupnpc librsvg libnatpmp zeromq python
          pip3 install ds_store mac_alias
      - name: Build Depends
        run: |
          echo "building with 8 threads"
          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
          make -C depends -j8 HOST=x86_64-apple-darwin20.6.0
      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-apple-darwin20.6.0
      - name: build binary
        run: |
          make -j8
          mkdir -p $BUILD_DIR
          mv src/{yerbas-cli,yerbasd,qt/yerbas-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: generate checksum and compress
        run: |
          echo "buildng $BUILD_VERSION version"
          cd $BUILD_DIR
          shasum yerbas-cli >> checksums.txt
          openssl sha256 yerbas-cli >> checksums.txt
          shasum yerbasd >> checksums.txt
          openssl sha256 yerbasd >> checksums.txt
          shasum yerbas-qt >> checksums.txt
          openssl sha256 yerbas-qt >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-macos-${{ needs.get-version.outputs.version }}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-macos-${{ needs.get-version.outputs.version }}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-macos-${{ needs.get-version.outputs.version }}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          openssl sha256 ${COMPRESS_DIR}/${COIN_NAME}-macos-${{ needs.get-version.outputs.version }}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-macos-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
      - name: Generate Macos dmg files
        run: |
          make deploy
      - name: Upload dmg file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-dmg-${{ env.BUILD_VERSION }}
          path: Yerbas-Qt.dmg
  test-macos:
    name: macOS Tests
    needs: [ get-version, build-macos ]
    runs-on: macos-11

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-macos-test-${{ needs.get-version.outputs.version }}

      - name: Run Unit Tests
        id: Tests
        run: |
          chmod +x test_yerbas
          ./test_yerbas --log_format=JUNIT > unit_test_results.xml
      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.COIN_NAME }}-macos-test-${{ needs.get-version.outputs.version }}
          path: unit_test_results.xml

      - name: Publish Unit Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          check_name: "macOS 11"
          detailed_summary: ${{ steps.Tests.conclusion == 'failure'}}
          include_passed: false
          report_paths: 'unit_test_results.xml'
  build-ubuntu20:
    name: Ubuntu20 build
    needs: checking-build-version
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Getting Version
        uses: actions/download-artifact@v3
      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
      - name: build depends
        run: |
          echo "building with $(nproc) threads"
          gcc --version
          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
          make -C depends -j$(nproc)  HOST=x86_64-pc-linux-gnu
      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu
      - name: build binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{yerbas-cli,yerbasd,qt/yerbas-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: generate checksum and compress
        run: |
          echo "buildng $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu20-${{ needs.get-version.outputs.version }}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu20-${{ needs.get-version.outputs.version }}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu20-${{ needs.get-version.outputs.version }}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu20-${{ needs.get-version.outputs.version }}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-ubuntu20-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
  build-win:
    name: window build
    needs: checking-build-version
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Getting Version
        uses: actions/download-artifact@v3
      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
          sudo apt-get install -y g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
          make -C depends -j$(nproc) HOST=x86_64-w64-mingw32
      - name: Configure
        run: |
          ./autogen.sh
          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
          ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32
      - name: build binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{yerbas-cli.exe,yerbasd.exe,qt/yerbas-qt.exe} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: generate checksum and compress
        run: |
          echo "buildng $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          zip -r ${COIN_NAME}-win-${{ needs.get-version.outputs.version }}.zip $BUILD_DIR/
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-win-${{ needs.get-version.outputs.version }}.zip ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-win-${{ needs.get-version.outputs.version }}.zip >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-win-${{ needs.get-version.outputs.version }}.zip >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-win-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

  test-win64:
    name: Win64 Tests
    needs: [ get-version, build-win64 ]
    runs-on: windows-latest

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-win-test-${{ needs.get-version.outputs.version }}

      - name: Check Artifacts
        run: |
          pwd
          dir
      - name: Run Unit Tests B
        id: Tests
        run: |
          pwd
          dir
          .\test_yerbas.exe --log_format=JUNIT > unit_test_results.xml
      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.COIN_NAME }}-win-test-${{ needs.get-version.outputs.version }}
          path: unit_test_results.xml

      - name: Publish Unit Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          check_name: "Win64"
          detailed_summary: ${{ steps.Tests.conclusion == 'failure'}}
          include_passed: false
          report_paths: 'unit_test_results.xml'

#  build-arm-32:
#    name: arm 32 bit build
#    needs: checking-build-version
#    runs-on: ubuntu-20.04
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Getting Version
#        uses: actions/download-artifact@v3
#      - name: Install Required Packages
#        run: |
#          sudo apt-get update -y
#          sudo apt-get upgrade -y
#         sudo apt-get install curl build-essential libtool g++-arm-linux-gnueabihf autotools-dev automake pkg-config python3 bsdmainutils cmake
#      - name: Build Depends
#        run: |
#          echo "building with $(nproc) threads"
#          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
#          make -C depends -j$(nproc) HOST=aarch32-linux-gnu
#      - name: configure
#        run: |
#          ./autogen.sh
#          ./configure --prefix=`pwd`/depends/arm-linux-gnueabihf
#      - name: build binary
#        run: |
#          make -j$(nproc)
#          mkdir -p $BUILD_DIR
#          mv src/{yerbas-cli,yerbasd,qt/yerbas-qt} $BUILD_DIR/
#      - name: generate checksum and compress binary
#        run: |
#          echo "buildng $BUILD_VERSION version"
#          cd $BUILD_DIR
#          echo "sha256:" >> checksums.txt
#          echo "------------------------------------" >> checksums.txt
#          shasum * >> checksums.txt
#          echo "------------------------------------" >> checksums.txt
#          echo "openssl-sha256:" >> checksums.txt
#          echo "------------------------------------" >> checksums.txt
#          sha256sum * >> checksums.txt
#          cat checksums.txt
#          cd ..
#          tar -cvzf ${COIN_NAME}-arm32-${{ needs.get-version.outputs.version }}.tar.gz $BUILD_DIR/*
#          mkdir -p ${COMPRESS_DIR}
#          mv ${COIN_NAME}-arm32-${{ needs.get-version.outputs.version }}.tar.gz ${COMPRESS_DIR}/
#          cd ${COMPRESS_DIR}
#          echo "sha256: `shasum ${COIN_NAME}-arm32-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
#          echo "openssl-sha256: `sha256sum ${COIN_NAME}-arm32-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
#          cat checksums.txt
#          cd ..
#      - name: Upload Binary Artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ env.COIN_NAME }}-arm32-${{ env.BUILD_VERSION }}
#          path: ${{ env.COMPRESS_DIR }}
  build-arm-64:
    name: arm 64 bit build
    needs: checking-build-version
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Getting Version
        uses: actions/download-artifact@v3
      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install curl build-essential libtool g++-aarch64-linux-gnu autotools-dev automake pkg-config python3 bsdmainutils cmake
      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
          make -C depends -j$(nproc) HOST=aarch64-linux-gnu
      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/aarch64-linux-gnu
      - name: build binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{yerbas-cli,yerbasd,qt/yerbas-qt} $BUILD_DIR/
      - name: generate checksum and compress binary
        run: |
          echo "buildng $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-arm64-${{ needs.get-version.outputs.version }}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-arm64-${{ needs.get-version.outputs.version }}.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-arm64-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-arm64-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          cat checksums.txt
          cd ..
      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-arm64-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

  test-arm-64:
    name: ARM 64-bit Tests
    needs: [ get-version, build-arm-64 ]
    runs-on: ubuntu-20.04

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-arm64-test-${{ needs.get-version.outputs.version }}

      - name: Run Unit Tests
        id: Tests
        uses: nandofw/arm-runner-action@v2.5.2
        with:
          base_image: raspios_lite_arm64:latest
          cpu: cortex-a7
          copy_artifact_dest: ${{ github.workspace }}
          copy_artifact_path: unit_test_results.xml
          copy_artifacts_on_fail: yes
          commands: |
             chmod +x test_yerbas
             ./test_yerbas --log_format=JUNIT > unit_test_results.xml
      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.COIN_NAME }}-arm64-test-${{ needs.get-version.outputs.version }}
          path: unit_test_results.xml

      - name: Publish Unit Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          check_name: "ARM 64-bit"
          detailed_summary: ${{ steps.Tests.conclusion == 'failure'}}
          include_passed: false
          report_paths: 'unit_test_results.xml'

  build-ubuntu22:
    name: Ubuntu 22 Build
    needs: checking-build-version
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get install curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake -y
      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          gcc --version
          export FALLBACK_DOWNLOAD_PATH=https://pool.nowput.org/depends/
          make -C depends -j$(nproc)  HOST=x86_64-pc-linux-gnu
      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu
      - name: Build Binaries
        run: |
          make -j$(nproc)
          mkdir -p ${BUILD_DIR} ${BUILD_DIR}_not_strip ${TEST_DIR}
          cp src/{yerbas-cli,yerbasd,qt/yerbas-qt} ${BUILD_DIR}/
          mv src/{yerbas-cli,yerbasd,qt/yerbas-qt} ${BUILD_DIR}_not_strip/
          mv src/test/test_yerbas ${TEST_DIR}
          strip ${BUILD_DIR}/*
      - name: Build Debug Binaries
        run: |
          make clean
          make distclean
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu --disable-tests --enable-debug
          make -j$(nproc)
          mkdir -p ${BUILD_DIR}_debug
          mv src/{yerbas-cli,yerbasd,qt/yerbas-qt} ${BUILD_DIR}_debug/
      - name: Generate Checksum and Compress
        run: |
          mkdir -p ${COMPRESS_DIR}
          cd ${BUILD_DIR}
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu22-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ../${BUILD_DIR}_debug
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu22-debug-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ../${BUILD_DIR}_not_strip
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu22-not_strip-${{ needs.get-version.outputs.version }}.tar.gz *
          cd ..
          mv *.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-ubuntu22-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu22-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu22-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu22-debug-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu22-not_strip-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu22-not_strip-${{ needs.get-version.outputs.version }}.tar.gz`" >> checksums.txt
          cd ..
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-${{ needs.get-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-test-${{ needs.get-version.outputs.version }}
          path: ${{ env.TEST_DIR }}

  test-ubuntu22:
    name: Ubuntu 22 Tests
    needs: [ checking-build-version, build-ubuntu22 ]
    runs-on: ubuntu-22.04

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-test-${{ needs.get-version.outputs.version }}

      - name: Run Unit Tests
        id: Tests
        run: |
          chmod +x test_yerbas
          ./test_yerbas --log_format=JUNIT > unit_test_results.xml
      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-test-${{ needs.get-version.outputs.version }}
          path: unit_test_results.xml

      - name: Publish Unit Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          check_name: "Ubuntu 22"
          detailed_summary: ${{ steps.Tests.conclusion == 'failure'}}
          include_passed: false
          report_paths: 'unit_test_results.xml'